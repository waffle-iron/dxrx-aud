{"version":3,"sources":["meteor://ðŸ’»app/packages/matb33_collection-hooks/packages/matb33_collection-hooks.js"],"names":[],"mappingsfile":"/packages/matb33_collection-hooks.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/collection-hooks.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Relevant AOP terminology:                                                                                           // 1\n// Aspect: User code that runs before/after (hook)                                                                     // 2\n// Advice: Wrapper code that knows when to call user code (aspects)                                                    // 3\n// Pointcut: before/after                                                                                              // 4\n                                                                                                                       // 5\nvar advices = {};                                                                                                      // 6\nvar Tracker = Package.tracker && Package.tracker.Tracker || Package.deps.Deps;                                         // 7\nvar publishUserId = Meteor.isServer && new Meteor.EnvironmentVariable();                                               // 8\n                                                                                                                       // 9\nvar directEnv = new Meteor.EnvironmentVariable();                                                                      // 10\nvar directOp = function (func) {                                                                                       // 11\n  return directEnv.withValue(true, func);                                                                              // 12\n};                                                                                                                     // 13\n                                                                                                                       // 14\nCollectionHooks = {                                                                                                    // 15\n  defaults: {                                                                                                          // 16\n    before: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}},                                     // 17\n    after: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}},                                      // 18\n    all: { insert: {}, update: {}, remove: {}, find: {}, findOne: {}, all: {}}                                         // 19\n  }                                                                                                                    // 20\n};                                                                                                                     // 21\n                                                                                                                       // 22\nCollectionHooks.getUserId = function () {                                                                              // 23\n  var userId;                                                                                                          // 24\n                                                                                                                       // 25\n  if (Meteor.isClient) {                                                                                               // 26\n    Tracker.nonreactive(function () {                                                                                  // 27\n      userId = Meteor.userId && Meteor.userId();                                                                       // 28\n    });                                                                                                                // 29\n  }                                                                                                                    // 30\n                                                                                                                       // 31\n  if (Meteor.isServer) {                                                                                               // 32\n    try {                                                                                                              // 33\n      // Will throw an error unless within method call.                                                                // 34\n      // Attempt to recover gracefully by catching:                                                                    // 35\n      userId = Meteor.userId && Meteor.userId();                                                                       // 36\n    } catch (e) {}                                                                                                     // 37\n                                                                                                                       // 38\n    if (!userId) {                                                                                                     // 39\n      // Get the userId if we are in a publish function.                                                               // 40\n      userId = publishUserId.get();                                                                                    // 41\n    }                                                                                                                  // 42\n  }                                                                                                                    // 43\n                                                                                                                       // 44\n  return userId;                                                                                                       // 45\n};                                                                                                                     // 46\n                                                                                                                       // 47\nCollectionHooks.extendCollectionInstance = function (self, constructor) {                                              // 48\n  var collection = Meteor.isClient ? self : self._collection;                                                          // 49\n                                                                                                                       // 50\n  // Offer a public API to allow the user to define aspects                                                            // 51\n  // Example: collection.before.insert(func);                                                                          // 52\n  _.each([\"before\", \"after\"], function (pointcut) {                                                                    // 53\n    _.each(advices, function (advice, method) {                                                                        // 54\n      Meteor._ensure(self, pointcut, method);                                                                          // 55\n      Meteor._ensure(self, \"_hookAspects\", method);                                                                    // 56\n                                                                                                                       // 57\n      self._hookAspects[method][pointcut] = [];                                                                        // 58\n      self[pointcut][method] = function (aspect, options) {                                                            // 59\n        var len = self._hookAspects[method][pointcut].push({                                                           // 60\n          aspect: aspect,                                                                                              // 61\n          options: CollectionHooks.initOptions(options, pointcut, method)                                              // 62\n        });                                                                                                            // 63\n                                                                                                                       // 64\n        return {                                                                                                       // 65\n          replace: function (aspect, options) {                                                                        // 66\n            self._hookAspects[method][pointcut].splice(len - 1, 1, {                                                   // 67\n              aspect: aspect,                                                                                          // 68\n              options: CollectionHooks.initOptions(options, pointcut, method)                                          // 69\n            });                                                                                                        // 70\n          },                                                                                                           // 71\n          remove: function () {                                                                                        // 72\n            self._hookAspects[method][pointcut].splice(len - 1, 1);                                                    // 73\n          }                                                                                                            // 74\n        };                                                                                                             // 75\n      };                                                                                                               // 76\n    });                                                                                                                // 77\n  });                                                                                                                  // 78\n                                                                                                                       // 79\n  // Offer a publicly accessible object to allow the user to define                                                    // 80\n  // collection-wide hook options.                                                                                     // 81\n  // Example: collection.hookOptions.after.update = {fetchPrevious: false};                                            // 82\n  self.hookOptions = EJSON.clone(CollectionHooks.defaults);                                                            // 83\n                                                                                                                       // 84\n  // Wrap mutator methods, letting the defined advice do the work                                                      // 85\n  _.each(advices, function (advice, method) {                                                                          // 86\n    // Store a reference to the mutator method in a publicly reachable location                                        // 87\n    var _super = collection[method];                                                                                   // 88\n                                                                                                                       // 89\n    Meteor._ensure(self, \"direct\", method);                                                                            // 90\n    self.direct[method] = function () {                                                                                // 91\n      var args = arguments;                                                                                            // 92\n      return directOp(function () {                                                                                    // 93\n        return constructor.prototype[method].apply(self, args);                                                        // 94\n      });                                                                                                              // 95\n    };                                                                                                                 // 96\n                                                                                                                       // 97\n    collection[method] = function () {                                                                                 // 98\n      if (directEnv.get() === true) {                                                                                  // 99\n        return _super.apply(collection, arguments);                                                                    // 100\n      }                                                                                                                // 101\n                                                                                                                       // 102\n      return advice.call(this,                                                                                         // 103\n        CollectionHooks.getUserId(),                                                                                   // 104\n        _super,                                                                                                        // 105\n        self,                                                                                                          // 106\n        self._hookAspects[method] || {},                                                                               // 107\n        function (doc) {                                                                                               // 108\n          return  _.isFunction(self._transform)                                                                        // 109\n                  ? function (d) { return self._transform(d || doc); }                                                 // 110\n                  : function (d) { return d || doc; };                                                                 // 111\n        },                                                                                                             // 112\n        _.toArray(arguments),                                                                                          // 113\n        false                                                                                                          // 114\n      );                                                                                                               // 115\n    };                                                                                                                 // 116\n  });                                                                                                                  // 117\n};                                                                                                                     // 118\n                                                                                                                       // 119\nCollectionHooks.defineAdvice = function (method, advice) {                                                             // 120\n  advices[method] = advice;                                                                                            // 121\n};                                                                                                                     // 122\n                                                                                                                       // 123\nCollectionHooks.initOptions = function (options, pointcut, method) {                                                   // 124\n  return CollectionHooks.extendOptions(CollectionHooks.defaults, options, pointcut, method);                           // 125\n};                                                                                                                     // 126\n                                                                                                                       // 127\nCollectionHooks.extendOptions = function (source, options, pointcut, method) {                                         // 128\n  options = _.extend(options || {}, source.all.all);                                                                   // 129\n  options = _.extend(options, source[pointcut].all);                                                                   // 130\n  options = _.extend(options, source.all[method]);                                                                     // 131\n  options = _.extend(options, source[pointcut][method]);                                                               // 132\n  return options;                                                                                                      // 133\n};                                                                                                                     // 134\n                                                                                                                       // 135\nCollectionHooks.getDocs = function (collection, selector, options) {                                                   // 136\n  var self = this;                                                                                                     // 137\n                                                                                                                       // 138\n  var findOptions = {transform: null, reactive: false}; // added reactive: false                                       // 139\n                                                                                                                       // 140\n  /*                                                                                                                   // 141\n  // No \"fetch\" support at this time.                                                                                  // 142\n  if (!self._validators.fetchAllFields) {                                                                              // 143\n    findOptions.fields = {};                                                                                           // 144\n    _.each(self._validators.fetch, function(fieldName) {                                                               // 145\n      findOptions.fields[fieldName] = 1;                                                                               // 146\n    });                                                                                                                // 147\n  }                                                                                                                    // 148\n  */                                                                                                                   // 149\n                                                                                                                       // 150\n  // Bit of a magic condition here... only \"update\" passes options, so this is                                         // 151\n  // only relevant to when update calls getDocs:                                                                       // 152\n  if (options) {                                                                                                       // 153\n    // This was added because in our case, we are potentially iterating over                                           // 154\n    // multiple docs. If multi isn't enabled, force a limit (almost like                                               // 155\n    // findOne), as the default for update without multi enabled is to affect                                          // 156\n    // only the first matched document:                                                                                // 157\n    if (!options.multi) {                                                                                              // 158\n      findOptions.limit = 1;                                                                                           // 159\n    }                                                                                                                  // 160\n  }                                                                                                                    // 161\n                                                                                                                       // 162\n  // Unlike validators, we iterate over multiple docs, so use                                                          // 163\n  // find instead of findOne:                                                                                          // 164\n  return collection.find(selector, findOptions);                                                                       // 165\n};                                                                                                                     // 166\n                                                                                                                       // 167\nCollectionHooks.reassignPrototype = function (instance, constr) {                                                      // 168\n  var hasSetPrototypeOf = typeof Object.setPrototypeOf === \"function\";                                                 // 169\n                                                                                                                       // 170\n  if (!constr) constr = typeof Mongo !== \"undefined\" ? Mongo.Collection : Meteor.Collection;                           // 171\n                                                                                                                       // 172\n  // __proto__ is not available in < IE11                                                                              // 173\n  // Note: Assigning a prototype dynamically has performance implications                                              // 174\n  if (hasSetPrototypeOf) {                                                                                             // 175\n    Object.setPrototypeOf(instance, constr.prototype);                                                                 // 176\n  } else if (instance.__proto__) {                                                                                     // 177\n    instance.__proto__ = constr.prototype;                                                                             // 178\n  }                                                                                                                    // 179\n};                                                                                                                     // 180\n                                                                                                                       // 181\nCollectionHooks.wrapCollection = function (ns, as) {                                                                   // 182\n  if (!as._CollectionConstructor) as._CollectionConstructor = as.Collection;                                           // 183\n  if (!as._CollectionPrototype) as._CollectionPrototype = new as.Collection(null);                                     // 184\n                                                                                                                       // 185\n  var constructor = as._CollectionConstructor;                                                                         // 186\n  var proto = as._CollectionPrototype;                                                                                 // 187\n                                                                                                                       // 188\n  ns.Collection = function () {                                                                                        // 189\n    var ret = constructor.apply(this, arguments);                                                                      // 190\n    CollectionHooks.extendCollectionInstance(this, constructor);                                                       // 191\n    return ret;                                                                                                        // 192\n  };                                                                                                                   // 193\n                                                                                                                       // 194\n  ns.Collection.prototype = proto;                                                                                     // 195\n  ns.Collection.prototype.constructor = ns.Collection;                                                                 // 196\n                                                                                                                       // 197\n  for (var prop in constructor) {                                                                                      // 198\n    if (constructor.hasOwnProperty(prop)) {                                                                            // 199\n      ns.Collection[prop] = constructor[prop];                                                                         // 200\n    }                                                                                                                  // 201\n  }                                                                                                                    // 202\n};                                                                                                                     // 203\n                                                                                                                       // 204\nif (typeof Mongo !== \"undefined\") {                                                                                    // 205\n  CollectionHooks.wrapCollection(Meteor, Mongo);                                                                       // 206\n  CollectionHooks.wrapCollection(Mongo, Mongo);                                                                        // 207\n} else {                                                                                                               // 208\n  CollectionHooks.wrapCollection(Meteor, Meteor);                                                                      // 209\n}                                                                                                                      // 210\n                                                                                                                       // 211\nif (Meteor.isServer) {                                                                                                 // 212\n  var _publish = Meteor.publish;                                                                                       // 213\n  Meteor.publish = function (name, func) {                                                                             // 214\n    return _publish.call(this, name, function () {                                                                     // 215\n      // This function is called repeatedly in publications                                                            // 216\n      var ctx = this, args = arguments;                                                                                // 217\n      return publishUserId.withValue(ctx && ctx.userId, function () {                                                  // 218\n        return func.apply(ctx, args);                                                                                  // 219\n      });                                                                                                              // 220\n    });                                                                                                                // 221\n  };                                                                                                                   // 222\n                                                                                                                       // 223\n  // Make the above available for packages with hooks that want to determine                                           // 224\n  // whether they are running inside a publish function or not.                                                        // 225\n  CollectionHooks.isWithinPublish = function () {                                                                      // 226\n    return publishUserId.get() !== undefined;                                                                          // 227\n  };                                                                                                                   // 228\n}                                                                                                                      // 229\n                                                                                                                       // 230\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/insert.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"insert\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var abort, ret;                                                                                                      // 6\n                                                                                                                       // 7\n  // args[0] : doc                                                                                                     // 8\n  // args[1] : callback                                                                                                // 9\n                                                                                                                       // 10\n  // before                                                                                                            // 11\n  if (!suppressAspects) {                                                                                              // 12\n    try {                                                                                                              // 13\n      _.each(aspects.before, function (o) {                                                                            // 14\n        var r = o.aspect.call(_.extend({transform: getTransform(args[0])}, ctx), userId, args[0]);                     // 15\n        if (r === false) abort = true;                                                                                 // 16\n      });                                                                                                              // 17\n                                                                                                                       // 18\n      if (abort) return false;                                                                                         // 19\n    } catch (e) {                                                                                                      // 20\n      if (async) return callback.call(self, e);                                                                        // 21\n      throw e;                                                                                                         // 22\n    }                                                                                                                  // 23\n  }                                                                                                                    // 24\n                                                                                                                       // 25\n  function after(id, err) {                                                                                            // 26\n    var doc = args[0];                                                                                                 // 27\n    if (id) {                                                                                                          // 28\n      doc = EJSON.clone(args[0]);                                                                                      // 29\n      doc._id = id;                                                                                                    // 30\n    }                                                                                                                  // 31\n    if (!suppressAspects) {                                                                                            // 32\n      var lctx = _.extend({transform: getTransform(doc), _id: id, err: err}, ctx);                                     // 33\n      _.each(aspects.after, function (o) {                                                                             // 34\n        o.aspect.call(lctx, userId, doc);                                                                              // 35\n      });                                                                                                              // 36\n    }                                                                                                                  // 37\n    return id;                                                                                                         // 38\n  }                                                                                                                    // 39\n                                                                                                                       // 40\n  if (async) {                                                                                                         // 41\n    args[args.length - 1] = function (err, obj) {                                                                      // 42\n      after(obj && obj[0] && obj[0]._id || obj, err);                                                                  // 43\n      return callback.apply(this, arguments);                                                                          // 44\n    };                                                                                                                 // 45\n    return _super.apply(self, args);                                                                                   // 46\n  } else {                                                                                                             // 47\n    ret = _super.apply(self, args);                                                                                    // 48\n    return after(ret && ret[0] && ret[0]._id || ret);                                                                  // 49\n  }                                                                                                                    // 50\n});                                                                                                                    // 51\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/update.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"update\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var docs, docIds, fields, abort, prev = {};                                                                          // 6\n  var collection = _.has(self, \"_collection\") ? self._collection : self;                                               // 7\n                                                                                                                       // 8\n  // args[0] : selector                                                                                                // 9\n  // args[1] : mutator                                                                                                 // 10\n  // args[2] : options (optional)                                                                                      // 11\n  // args[3] : callback                                                                                                // 12\n                                                                                                                       // 13\n  if (_.isFunction(args[2])) {                                                                                         // 14\n    callback = args[2];                                                                                                // 15\n    args[2] = {};                                                                                                      // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  if (!suppressAspects) {                                                                                              // 19\n    try {                                                                                                              // 20\n      if (aspects.before || aspects.after) {                                                                           // 21\n        fields = getFields(args[1]);                                                                                   // 22\n        docs = CollectionHooks.getDocs.call(self, collection, args[0], args[2]).fetch();                               // 23\n        docIds = _.map(docs, function (doc) { return doc._id; });                                                      // 24\n      }                                                                                                                // 25\n                                                                                                                       // 26\n      // copy originals for convenience for the \"after\" pointcut                                                       // 27\n      if (aspects.after) {                                                                                             // 28\n        prev.mutator = EJSON.clone(args[1]);                                                                           // 29\n        prev.options = EJSON.clone(args[2]);                                                                           // 30\n        if (_.some(aspects.after, function (o) { return o.options.fetchPrevious !== false; }) &&                       // 31\n            CollectionHooks.extendOptions(instance.hookOptions, {}, \"after\", \"update\").fetchPrevious !== false) {      // 32\n          prev.docs = {};                                                                                              // 33\n          _.each(docs, function (doc) {                                                                                // 34\n            prev.docs[doc._id] = EJSON.clone(doc);                                                                     // 35\n          });                                                                                                          // 36\n        }                                                                                                              // 37\n      }                                                                                                                // 38\n                                                                                                                       // 39\n      // before                                                                                                        // 40\n      _.each(aspects.before, function (o) {                                                                            // 41\n        _.each(docs, function (doc) {                                                                                  // 42\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc, fields, args[1], args[2]); // 43\n          if (r === false) abort = true;                                                                               // 44\n        });                                                                                                            // 45\n      });                                                                                                              // 46\n                                                                                                                       // 47\n      if (abort) return false;                                                                                         // 48\n    } catch (e) {                                                                                                      // 49\n      if (async) return callback.call(self, e);                                                                        // 50\n      throw e;                                                                                                         // 51\n    }                                                                                                                  // 52\n  }                                                                                                                    // 53\n                                                                                                                       // 54\n  function after(affected, err) {                                                                                      // 55\n    if (!suppressAspects) {                                                                                            // 56\n      var fields = getFields(args[1]);                                                                                 // 57\n      var docs = CollectionHooks.getDocs.call(self, collection, {_id: {$in: docIds}}, args[2]).fetch();                // 58\n                                                                                                                       // 59\n      _.each(aspects.after, function (o) {                                                                             // 60\n        _.each(docs, function (doc) {                                                                                  // 61\n          o.aspect.call(_.extend({                                                                                     // 62\n            transform: getTransform(doc),                                                                              // 63\n            previous: prev.docs && prev.docs[doc._id],                                                                 // 64\n            affected: affected,                                                                                        // 65\n            err: err                                                                                                   // 66\n          }, ctx), userId, doc, fields, prev.mutator, prev.options);                                                   // 67\n        });                                                                                                            // 68\n      });                                                                                                              // 69\n    }                                                                                                                  // 70\n  }                                                                                                                    // 71\n                                                                                                                       // 72\n  if (async) {                                                                                                         // 73\n    args[args.length - 1] = function (err, affected) {                                                                 // 74\n      after(affected, err);                                                                                            // 75\n      return callback.apply(this, arguments);                                                                          // 76\n    };                                                                                                                 // 77\n    return _super.apply(this, args);                                                                                   // 78\n  } else {                                                                                                             // 79\n    var affected = _super.apply(self, args);                                                                           // 80\n    after(affected);                                                                                                   // 81\n    return affected;                                                                                                   // 82\n  }                                                                                                                    // 83\n});                                                                                                                    // 84\n                                                                                                                       // 85\n// This function contains a snippet of code pulled and modified from:                                                  // 86\n// ~/.meteor/packages/mongo-livedata/collection.js:632-668                                                             // 87\n// It's contained in these utility functions to make updates easier for us in                                          // 88\n// case this code changes.                                                                                             // 89\nvar getFields = function (mutator) {                                                                                   // 90\n  // compute modified fields                                                                                           // 91\n  var fields = [];                                                                                                     // 92\n  _.each(mutator, function (params, op) {                                                                              // 93\n    _.each(_.keys(params), function (field) {                                                                          // 94\n      // treat dotted fields as if they are replacing their                                                            // 95\n      // top-level part                                                                                                // 96\n      if (field.indexOf('.') !== -1)                                                                                   // 97\n        field = field.substring(0, field.indexOf('.'));                                                                // 98\n                                                                                                                       // 99\n      // record the field we are trying to change                                                                      // 100\n      if (!_.contains(fields, field))                                                                                  // 101\n        fields.push(field);                                                                                            // 102\n    });                                                                                                                // 103\n  });                                                                                                                  // 104\n                                                                                                                       // 105\n  return fields;                                                                                                       // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n// This function contains a snippet of code pulled and modified from:                                                  // 109\n// ~/.meteor/packages/mongo-livedata/collection.js                                                                     // 110\n// It's contained in these utility functions to make updates easier for us in                                          // 111\n// case this code changes.                                                                                             // 112\nvar getFields = function (mutator) {                                                                                   // 113\n  // compute modified fields                                                                                           // 114\n  var fields = [];                                                                                                     // 115\n                                                                                                                       // 116\n  _.each(mutator, function (params, op) {                                                                              // 117\n    //====ADDED START=======================                                                                           // 118\n    if (_.contains([\"$set\", \"$unset\", \"$inc\", \"$push\", \"$pull\", \"$pop\", \"$rename\", \"$pullAll\", \"$addToSet\", \"$bit\"], op)) {\n    //====ADDED END=========================                                                                           // 120\n      _.each(_.keys(params), function (field) {                                                                        // 121\n        // treat dotted fields as if they are replacing their                                                          // 122\n        // top-level part                                                                                              // 123\n        if (field.indexOf('.') !== -1)                                                                                 // 124\n          field = field.substring(0, field.indexOf('.'));                                                              // 125\n                                                                                                                       // 126\n        // record the field we are trying to change                                                                    // 127\n        if (!_.contains(fields, field))                                                                                // 128\n          fields.push(field);                                                                                          // 129\n      });                                                                                                              // 130\n    //====ADDED START=======================                                                                           // 131\n    } else {                                                                                                           // 132\n      fields.push(op);                                                                                                 // 133\n    }                                                                                                                  // 134\n    //====ADDED END=========================                                                                           // 135\n  });                                                                                                                  // 136\n                                                                                                                       // 137\n  return fields;                                                                                                       // 138\n};                                                                                                                     // 139\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/remove.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"remove\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var callback = _.last(args);                                                                                         // 4\n  var async = _.isFunction(callback);                                                                                  // 5\n  var docs, abort, prev = [];                                                                                          // 6\n  var collection = _.has(self, \"_collection\") ? self._collection : self;                                               // 7\n                                                                                                                       // 8\n  // args[0] : selector                                                                                                // 9\n  // args[1] : callback                                                                                                // 10\n                                                                                                                       // 11\n  if (!suppressAspects) {                                                                                              // 12\n    try {                                                                                                              // 13\n      if (aspects.before || aspects.after) {                                                                           // 14\n        docs = CollectionHooks.getDocs.call(self, collection, args[0]).fetch();                                        // 15\n      }                                                                                                                // 16\n                                                                                                                       // 17\n      // copy originals for convenience for the \"after\" pointcut                                                       // 18\n      if (aspects.after) {                                                                                             // 19\n        _.each(docs, function (doc) {                                                                                  // 20\n          prev.push(EJSON.clone(doc));                                                                                 // 21\n        });                                                                                                            // 22\n      }                                                                                                                // 23\n                                                                                                                       // 24\n      // before                                                                                                        // 25\n      _.each(aspects.before, function (o) {                                                                            // 26\n        _.each(docs, function (doc) {                                                                                  // 27\n          var r = o.aspect.call(_.extend({transform: getTransform(doc)}, ctx), userId, doc);                           // 28\n          if (r === false) abort = true;                                                                               // 29\n        });                                                                                                            // 30\n      });                                                                                                              // 31\n                                                                                                                       // 32\n      if (abort) return false;                                                                                         // 33\n    } catch (e) {                                                                                                      // 34\n      if (async) return callback.call(self, e);                                                                        // 35\n      throw e;                                                                                                         // 36\n    }                                                                                                                  // 37\n  }                                                                                                                    // 38\n                                                                                                                       // 39\n  function after(err) {                                                                                                // 40\n    if (!suppressAspects) {                                                                                            // 41\n      _.each(aspects.after, function (o) {                                                                             // 42\n        _.each(prev, function (doc) {                                                                                  // 43\n          o.aspect.call(_.extend({transform: getTransform(doc), err: err}, ctx), userId, doc);                         // 44\n        });                                                                                                            // 45\n      });                                                                                                              // 46\n    }                                                                                                                  // 47\n  }                                                                                                                    // 48\n                                                                                                                       // 49\n  if (async) {                                                                                                         // 50\n    args[args.length - 1] = function (err) {                                                                           // 51\n      after(err);                                                                                                      // 52\n      return callback.apply(this, arguments);                                                                          // 53\n    };                                                                                                                 // 54\n    return _super.apply(self, args);                                                                                   // 55\n  } else {                                                                                                             // 56\n    var result = _super.apply(self, args);                                                                             // 57\n    after();                                                                                                           // 58\n    return result;                                                                                                     // 59\n  }                                                                                                                    // 60\n});                                                                                                                    // 61\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/find.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"find\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var ret, abort;                                                                                                      // 4\n                                                                                                                       // 5\n  // args[0] : selector                                                                                                // 6\n  // args[1] : options                                                                                                 // 7\n                                                                                                                       // 8\n  // before                                                                                                            // 9\n  if (!suppressAspects) {                                                                                              // 10\n    _.each(aspects.before, function (o) {                                                                              // 11\n      var r = o.aspect.call(ctx, userId, args[0], args[1]);                                                            // 12\n      if (r === false) abort = true;                                                                                   // 13\n    });                                                                                                                // 14\n                                                                                                                       // 15\n    if (abort) return false;                                                                                           // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  function after(cursor) {                                                                                             // 19\n    if (!suppressAspects) {                                                                                            // 20\n      _.each(aspects.after, function (o) {                                                                             // 21\n        o.aspect.call(ctx, userId, args[0], args[1], cursor);                                                          // 22\n      });                                                                                                              // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n                                                                                                                       // 26\n  ret = _super.apply(self, args);                                                                                      // 27\n  after(ret);                                                                                                          // 28\n                                                                                                                       // 29\n  return ret;                                                                                                          // 30\n});                                                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/findone.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nCollectionHooks.defineAdvice(\"findOne\", function (userId, _super, instance, aspects, getTransform, args, suppressAspects) {\n  var self = this;                                                                                                     // 2\n  var ctx = {context: self, _super: _super, args: args};                                                               // 3\n  var ret, abort;                                                                                                      // 4\n                                                                                                                       // 5\n  // args[0] : selector                                                                                                // 6\n  // args[1] : options                                                                                                 // 7\n                                                                                                                       // 8\n  // before                                                                                                            // 9\n  if (!suppressAspects) {                                                                                              // 10\n    _.each(aspects.before, function (o) {                                                                              // 11\n      var r = o.aspect.call(ctx, userId, args[0], args[1]);                                                            // 12\n      if (r === false) abort = true;                                                                                   // 13\n    });                                                                                                                // 14\n                                                                                                                       // 15\n    if (abort) return false;                                                                                           // 16\n  }                                                                                                                    // 17\n                                                                                                                       // 18\n  function after(doc) {                                                                                                // 19\n    if (!suppressAspects) {                                                                                            // 20\n      _.each(aspects.after, function (o) {                                                                             // 21\n        o.aspect.call(ctx, userId, args[0], args[1], doc);                                                             // 22\n      });                                                                                                              // 23\n    }                                                                                                                  // 24\n  }                                                                                                                    // 25\n                                                                                                                       // 26\n  ret = _super.apply(self, args);                                                                                      // 27\n  after(ret);                                                                                                          // 28\n                                                                                                                       // 29\n  return ret;                                                                                                          // 30\n});                                                                                                                    // 31\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/matb33:collection-hooks/users-compat.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (Meteor.users) {                                                                                                    // 1\n  // If Meteor.users has been instantiated, attempt to re-assign its prototype:                                        // 2\n  CollectionHooks.reassignPrototype(Meteor.users);                                                                     // 3\n                                                                                                                       // 4\n  // Next, give it the hook aspects:                                                                                   // 5\n  var Collection = typeof Mongo !== \"undefined\" && typeof Mongo.Collection !== \"undefined\" ? Mongo.Collection : Meteor.Collection;\n  CollectionHooks.extendCollectionInstance(Meteor.users, Collection);                                                  // 7\n}                                                                                                                      // 8\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}