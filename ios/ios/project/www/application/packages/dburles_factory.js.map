{"version":3,"sources":["meteor://ðŸ’»app/packages/dburles:factory/factory.js"],"names":[],"mappings":"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","file":"/packages/dburles_factory.js","sourcesContent":["/* global LocalCollection */\n/* global Factory:true */\n\nconst factories = {};\n\nFactory = class Factory {\n  constructor(name, collection, attributes) {\n    this.name = name;\n    this.collection = collection;\n    this.attributes = attributes;\n    this.afterHooks = [];\n    this.sequence = 0;\n  }\n\n  after(fn) {\n    this.afterHooks.push(fn);\n    return this;\n  }\n};\n\nFactory.define = (name, collection, attributes) => {\n  factories[name] = new Factory(name, collection, attributes);\n  return factories[name];\n};\n\nFactory.get = name => {\n  const factory = factories[name];\n  if (! factory) {\n    throw new Error(\"Factory: There is no factory named \" + name);\n  }\n  return factory;\n};\n\nFactory.build = (name, attributes = {}, options = {}) => {\n  const factory = Factory.get(name);\n  const result = {};\n\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\n\n  // either create a new factory and return its _id\n  // or return a 'fake' _id (since we're not inserting anything)\n  const makeRelation = relName => {\n    if (options.insert) {\n      return Factory.create(relName)._id;\n    }\n    if (options.tree) {\n      return Factory.build(relName, {}, {tree: true});\n    }\n    // fake an id on build\n    return Random.id();\n  };\n\n  const getValue = value => {\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\n  };\n\n  const getValueFromFunction = func => {\n    const api = {\n      sequence: fn => fn(factory.sequence)\n    };\n    const fnRes = func.call(result, api);\n    return getValue(fnRes);\n  };\n\n  factory.sequence += 1;\n\n  const walk = (record, object) => {\n    _.each(object, (value, key) => {\n      let newValue = value;\n      // is this a Factory instance?\n      if (value instanceof Factory) {\n        newValue = makeRelation(value.name);\n      } else if (_.isArray(value)) {\n        newValue = value.map(element => {\n          if (_.isFunction(element)) {\n            return getValueFromFunction(element);\n          }\n          return getValue(element);\n        });\n      } else if (_.isFunction(value)) {\n        newValue = getValueFromFunction(value);\n      // if an object literal is passed in, traverse deeper into it\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\n        record[key] = record[key] || {};\n        return walk(record[key], value);\n      }\n\n      const modifier = {$set: {}};\n\n      if (key !== '_id') {\n        modifier.$set[key] = newValue;\n      }\n\n      LocalCollection._modify(record, modifier);\n    });\n  };\n\n  walk(result, extendedAttributes);\n\n  if (! options.tree) {\n    result._id = extendedAttributes._id || Random.id();\n  }\n  return result;\n};\n\nFactory.tree = (name, attributes) => {\n  return Factory.build(name, attributes, {tree: true});\n};\n\nFactory._create = (name, doc) => {\n  const collection = Factory.get(name).collection;\n  const insertId = collection.insert(doc);\n  const record = collection.findOne(insertId);\n  return record;\n};\n\nFactory.create = (name, attributes = {}) => {\n  const doc = Factory.build(name, attributes, {insert: true});\n  const record = Factory._create(name, doc);\n\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\n\n  return record;\n};\n\nFactory.extend = (name, attributes = {}) => {\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\n};\n"]}