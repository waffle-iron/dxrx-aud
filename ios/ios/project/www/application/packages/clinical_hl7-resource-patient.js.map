{"version":3,"sources":["meteor://ðŸ’»app/packages/clinical_hl7-resource-patient/lib/Patients.js"],"names":[],"mappingssG","file":"/packages/clinical_hl7-resource-patient.js","sourcesContent":["\n/**\n * @summary Represents a Patient; typically documented by a clinician.  A Clinical Impression can be self-assigned, in which case it may be considered a Status or ReportedCondition.\n * @class Patient\n * @param {Object} document An object representing an impression, ususally a Mongo document.\n * @example\nnewPatient = new Patient({\n  name: {\n    given: \"Jane\",\n    family: \"Doe\"\n  },\n  gender: \"female\",\n  identifier: \"12345\"\n});\n\n\nnewPatient.clean();\nnewPatient.validate();\nnewPatient.save();\n */\n\n\n// create the object using our BaseModel\nPatient = BaseModel.extend();\n\n\n//Assign a collection so the object knows how to perform CRUD operations\nPatient.prototype._collection = Patients;\n\n// Create a persistent data store for addresses to be stored.\n// HL7.Resources.Patients = new Mongo.Collection('HL7.Resources.Patients');\nPatients = new Mongo.Collection('Patients');\nPatients.allow({\n  insert: function () {\n    return true;\n  },\n  update: function () {\n    return true;\n  },\n  remove: function () {\n    return true;\n  }\n});\n\n//Add the transform to the collection since Meteor.users is pre-defined by the accounts package\nPatients._transform = function (document) {\n  return new Patient(document);\n};\n\n\nif (Meteor.isClient){\n  Meteor.subscribe(\"Patients\");\n}\n\nif (Meteor.isServer){\n  Meteor.publish(\"Patients\", function (argument){\n    return Patients.find();\n  });\n}\n\n\nPatientSchema = new SimpleSchema({\n  \"resourceType\" : {\n    type: String,\n    defaultValue: \"Patient\"\n  },\n  \"identifier\" : {\n    optional: true,\n    type: [ IdentifierSchema ]\n    },\n  \"active\" : {\n    type: Boolean,\n    defaultValue: true\n    },\n  \"name\" : {\n    type: [ HumanNameSchema ]\n    },\n  \"telecom\" : {\n    optional: true,\n    type: [ ContactPointSchema ]\n    },\n  \"gender\" : {\n    optional: true,\n    type: String\n    },\n  \"birthDate\" : {\n    optional: true,\n    type: Date\n    },\n  \"deceasedBoolean\" : {\n    optional: true,\n    type: Boolean\n    },\n  \"deceasedDateTime\" : {\n    optional: true,\n    type: Date\n    },\n  \"address\" : {\n    optional: true,\n    type: [ String ]\n    },\n  \"maritalStatus\" : {\n    optional: true,\n    type: CodeableConceptSchema\n    },\n  \"multipleBirthBoolean\" : {\n    optional: true,\n    type: Boolean\n    },\n  \"multipleBirthInteger\" : {\n    optional: true,\n    type: Number\n    },\n  \"photo\" : {\n    optional: true,\n    type: [ AttachmentSchema ]\n    },\n  \"contact.$.relationship\" : {\n    optional: true,\n    type: [ String ]\n    },\n  \"contact.$.name\" : {\n    optional: true,\n    type: HumanNameSchema\n    },\n  \"contact.$.telecom\" : {\n    optional: true,\n    type: [ ContactPointSchema ]\n    },\n  \"contact.$.address\" : {\n    optional: true,\n    type: AddressSchema\n    },\n  \"contact.$.gender\" : {\n    optional: true,\n    type: String\n    },\n  \"contact.$.organization\" : {\n    optional: true,\n    type: String\n    },\n  \"contact.$.period\" : {\n    optional: true,\n    type: PeriodSchema\n    },\n  \"animal.species\" : {\n    optional: true,\n    type: String\n    //type: CodeableConceptSchema\n    },\n  \"animal.breed\" : {\n    optional: true,\n    type: CodeableConceptSchema\n    },\n  \"animal.genderStatus\" : {\n    optional: true,\n    type: CodeableConceptSchema\n    },\n  \"communication.$.language\" : {\n    optional: true,\n    type: CodeableConceptSchema\n    },\n  \"communication.$.preferred\" : {\n    optional: true,\n    type: Boolean\n    },\n  \"careProvider\" : {\n    optional: true,\n    type: [ ReferenceSchema ]\n    },\n  \"managingOrganization\" : {\n    optional: true,\n    type: String\n    },\n  \"link.$.other\" : {\n    optional: true,\n    type: String\n    },\n  \"link.$.type\" : {\n    optional: true,\n    type: String\n    }\n});\nPatients.attachSchema(PatientSchema);\n\n//================================================================\n\n\n\n\n\n/**\n * @summary The displayed name of the patient.\n * @memberOf Patient\n * @name displayName\n * @version 1.2.3\n * @returns {Boolean}\n * @example\n * ```js\n * ```\n */\n\nPatient.prototype.displayName = function () {\n\n};\n"]}