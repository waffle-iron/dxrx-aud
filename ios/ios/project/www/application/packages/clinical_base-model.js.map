{"version":3,"sources":["meteor://ðŸ’»app/packages/clinical_base-model/packages/clinical_base-model.js"],"names":[],"mappingsfile":"/packages/clinical_base-model.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/clinical:base-model/lib/BaseModel.js                                                              //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nif (typeof Object.create !== 'function') {                                                                    // 1\n  Object.create = (function () {                                                                              // 2\n    var thing = function () {};                                                                               // 3\n    return function (prototype) {                                                                             // 4\n      if (arguments.length > 1) {                                                                             // 5\n        throw Error('Second argument not supported');                                                         // 6\n      }                                                                                                       // 7\n      if (typeof prototype !== 'object') {                                                                    // 8\n        throw TypeError('Argument must be an object');                                                        // 9\n      }                                                                                                       // 10\n      thing.prototype = prototype;                                                                            // 11\n      var result = new thing();                                                                               // 12\n      thing.prototype = null;                                                                                 // 13\n      return result;                                                                                          // 14\n    };                                                                                                        // 15\n  })();                                                                                                       // 16\n}                                                                                                             // 17\n                                                                                                              // 18\nvar diff = function (a, b) {                                                                                  // 19\n  var keys = _.map(a, function (v, k) {                                                                       // 20\n    if (b[k] === v) {                                                                                         // 21\n      return k;                                                                                               // 22\n    }                                                                                                         // 23\n  });                                                                                                         // 24\n  return _.omit(a, keys);                                                                                     // 25\n};                                                                                                            // 26\n                                                                                                              // 27\n                                                                                                              // 28\n                                                                                                              // 29\n/*globals BaseModel:true*/                                                                                    // 30\n                                                                                                              // 31\nBaseModel = function () {};                                                                                   // 32\n                                                                                                              // 33\nBaseModel.createEmpty = function (_id) {                                                                      // 34\n  return new this({                                                                                           // 35\n    _id: _id                                                                                                  // 36\n  });                                                                                                         // 37\n};                                                                                                            // 38\n                                                                                                              // 39\nBaseModel.extend = function () {                                                                              // 40\n  var child = function (document) {                                                                           // 41\n    _.extend(this, document);                                                                                 // 42\n    this._document = document;                                                                                // 43\n  };                                                                                                          // 44\n                                                                                                              // 45\n  //add Static properties and methods                                                                         // 46\n  _.extend(child, this);                                                                                      // 47\n                                                                                                              // 48\n  //prototypal inheritence                                                                                    // 49\n  child.prototype = Object.create(this.prototype);                                                            // 50\n  child.prototype.constructor = child;                                                                        // 51\n                                                                                                              // 52\n  //access to parent                                                                                          // 53\n  child.prototype._parent_ = this;                                                                            // 54\n  child.prototype._super_ = this.prototype;                                                                   // 55\n                                                                                                              // 56\n  return child;                                                                                               // 57\n};                                                                                                            // 58\n                                                                                                              // 59\nBaseModel.extendAndSetupCollection = function (collectionName) {                                              // 60\n  var model = this.extend();                                                                                  // 61\n                                                                                                              // 62\n  model.collection = model.prototype._collection = new Mongo.Collection(collectionName, {                     // 63\n    transform: function (document) {                                                                          // 64\n      return new model(document);                                                                             // 65\n    }                                                                                                         // 66\n  });                                                                                                         // 67\n                                                                                                              // 68\n  Meteor[collectionName] = model.collection;                                                                  // 69\n                                                                                                              // 70\n  return model;                                                                                               // 71\n};                                                                                                            // 72\n                                                                                                              // 73\nBaseModel.appendSchema = function (schemaObject) {                                                            // 74\n  var schema = new SimpleSchema(schemaObject);                                                                // 75\n  var collection = this.prototype._collection;                                                                // 76\n                                                                                                              // 77\n  if (collection) {                                                                                           // 78\n    collection.attachSchema(schema);                                                                          // 79\n    this.prototype._validator = schema.newContext();                                                          // 80\n  } else {                                                                                                    // 81\n    throw new Error(                                                                                          // 82\n      \"Can't append schema to non existent collection. Either use extendAndSetupCollection() or assign a collection to Model.prototype._collection\"\n    );                                                                                                        // 84\n  }                                                                                                           // 85\n};                                                                                                            // 86\n                                                                                                              // 87\nBaseModel.methods = function (methodMap) {                                                                    // 88\n  var self = this;                                                                                            // 89\n  if (_.isObject(methodMap)) {                                                                                // 90\n    _.each(methodMap, function (method, name) {                                                               // 91\n      if (_.isFunction(method)) {                                                                             // 92\n        if (!self.prototype[name]) {                                                                          // 93\n          self.prototype[name] = method;                                                                      // 94\n        } else {                                                                                              // 95\n          throw new Meteor.Error(\"existent-method\", \"The method \" + name + \" already exists.\");               // 96\n        }                                                                                                     // 97\n      }                                                                                                       // 98\n    });                                                                                                       // 99\n  }                                                                                                           // 100\n};                                                                                                            // 101\n                                                                                                              // 102\nBaseModel.prototype._getSchema = function () {                                                                // 103\n  return this._collection._c2._simpleSchema;                                                                  // 104\n};                                                                                                            // 105\n                                                                                                              // 106\nBaseModel.prototype._checkCollectionExists = function () {                                                    // 107\n  if (!this._collection) {                                                                                    // 108\n    throw new Error(                                                                                          // 109\n      \"No collection found. Either use extendAndSetupCollection() or assign a collection to Model.prototype._collection\"\n    );                                                                                                        // 111\n  }                                                                                                           // 112\n};                                                                                                            // 113\n                                                                                                              // 114\nBaseModel.prototype.getCollectionName = function () {                                                         // 115\n  this._checkCollectionExists();                                                                              // 116\n  return this._collection._name;                                                                              // 117\n};                                                                                                            // 118\n                                                                                                              // 119\nBaseModel.prototype.checkOwnership = function () {                                                            // 120\n  return this.userId === Meteor.userId();                                                                     // 121\n};                                                                                                            // 122\n                                                                                                              // 123\n// ===============================================                                                            // 124\n// crud/persistence functions                                                                                 // 125\n                                                                                                              // 126\nBaseModel.prototype.save = function (callback) {                                                              // 127\n  this._checkCollectionExists();                                                                              // 128\n  var obj = {};                                                                                               // 129\n  var schema = this._getSchema();                                                                             // 130\n                                                                                                              // 131\n  _.each(this, function (value, key) {                                                                        // 132\n    if (key !== \"_document\") {                                                                                // 133\n      obj[key] = value;                                                                                       // 134\n    }                                                                                                         // 135\n  });                                                                                                         // 136\n                                                                                                              // 137\n                                                                                                              // 138\n  if (this._id) {                                                                                             // 139\n    obj = diff(obj, this._document);                                                                          // 140\n    console.log(obj);                                                                                         // 141\n    this._collection.update(this._id, {                                                                       // 142\n      $set: obj                                                                                               // 143\n    }, callback);                                                                                             // 144\n  } else {                                                                                                    // 145\n    if (Meteor.isClient && schema) {                                                                          // 146\n      obj = schema.clean(obj);                                                                                // 147\n    }                                                                                                         // 148\n    this._id = this._collection.insert(obj, callback);                                                        // 149\n  }                                                                                                           // 150\n                                                                                                              // 151\n  return this;                                                                                                // 152\n};                                                                                                            // 153\n                                                                                                              // 154\nBaseModel.prototype.update = function (modifier) {                                                            // 155\n  if (this._id) {                                                                                             // 156\n    this._checkCollectionExists();                                                                            // 157\n                                                                                                              // 158\n    this._collection.update(this._id, modifier);                                                              // 159\n  }                                                                                                           // 160\n};                                                                                                            // 161\n                                                                                                              // 162\nBaseModel.prototype._updateLocal = function (modifier) {                                                      // 163\n  this._collection._collection.update(this._id, modifier);                                                    // 164\n};                                                                                                            // 165\n                                                                                                              // 166\nBaseModel.prototype.set = function (key, value) {                                                             // 167\n  var obj = {};                                                                                               // 168\n  obj[key] = value;                                                                                           // 169\n  this[key] = value;                                                                                          // 170\n  this._id && this._updateLocal({                                                                             // 171\n    $set: obj                                                                                                 // 172\n  });                                                                                                         // 173\n  return this;                                                                                                // 174\n};                                                                                                            // 175\n                                                                                                              // 176\nBaseModel.prototype.remove = function () {                                                                    // 177\n  if (this._id) {                                                                                             // 178\n    this._checkCollectionExists();                                                                            // 179\n                                                                                                              // 180\n    this._collection.remove({                                                                                 // 181\n      _id: this._id                                                                                           // 182\n    });                                                                                                       // 183\n  }                                                                                                           // 184\n};                                                                                                            // 185\n                                                                                                              // 186\n// ===============================================                                                            // 187\n// validation functions                                                                                       // 188\n                                                                                                              // 189\nBaseModel.prototype.clean = function () {                                                                     // 190\n  if(this._collection._c2._simpleSchema){                                                                     // 191\n    return this._collection._c2._simpleSchema.clean(this._document);                                          // 192\n  }                                                                                                           // 193\n};                                                                                                            // 194\n                                                                                                              // 195\nBaseModel.prototype.validate = function (options) {                                                           // 196\n  var validator = this.prototype._validator;                                                                  // 197\n                                                                                                              // 198\n  if (validator) {                                                                                            // 199\n    validator.validate(this, options)                                                                         // 200\n  } else {                                                                                                    // 201\n    throw new Error(                                                                                          // 202\n      \"Can't validate document when object doesn't have a schema and validation context. Use .appendSchema()\" // 203\n      );                                                                                                      // 204\n  }                                                                                                           // 205\n};                                                                                                            // 206\n                                                                                                              // 207\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/clinical:base-model/lib/security.js                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nSimpleSchema.messages({Untrusted: \"Inserts/Updates from untrusted code not supported\"});                      // 1\n                                                                                                              // 2\nSimpleSchema.denyUntrusted = function() {                                                                     // 3\n    if(this.isSet){                                                                                           // 4\n        var autoValue = this.definition.autoValue && this.definition.autoValue.call(this);                    // 5\n        var defaultValue = this.definition.defaultValue;                                                      // 6\n                                                                                                              // 7\n        if(this.value != defaultValue && this.value != autoValue && !this.isFromTrustedCode){                 // 8\n            return \"Untrusted\";                                                                               // 9\n        }                                                                                                     // 10\n    }                                                                                                         // 11\n};                                                                                                            // 12\n                                                                                                              // 13\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}