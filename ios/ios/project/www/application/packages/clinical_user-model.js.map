{"version":3,"sources":["meteor://ðŸ’»app/packages/clinical_user-model/client/template.helpers.js","meteor://ðŸ’»app/packages/clinical_user-model/lib/user-model.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8G;;;;;;;;;;;;;;;;;;AClfile":"/packages/clinical_user-model.js","sourcesContent":["/**\n * @summary Gets the full name of the user.\n * @memberOf User\n * @name {{fullName}}\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```html\n * <div>{{fullName}}</div>\n * ```\n */\n Template.registerHelper(\"fullName\", function (argument){\n   if (Meteor.user()) {\n     return Meteor.user().fullName();\n   } else {\n     return \"Log In\";\n   }\n});\n","/**\n * @summary Represents a User\n * @class User\n * @param {Object} document An object representing a conversation ususally a Mongo document\n */\nUser = BaseModel.extend();\n\n//Assign a reference from Meteor.users to User.prototype._collection so BaseModel knows how to access it\nUser.prototype._collection = Meteor.users;\n\n//Add the transform to the collection since Meteor.users is pre-defined by the accounts package\nMeteor.users._transform = function (document) {\n  return new User(document);\n};\n\n\n\n\n/**\n * @summary The personal name of the user account.\n * @memberOf User\n * @name displayName\n * @version 1.2.3\n * @returns {String} A name representation of the user account\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.displayName());\n * ```\n */\n\nUser.prototype.displayName = function () {\n  return this.isSelf() ? \"You\" : this.username;\n};\n\n\nUser.prototype.isTrue = function () {\n  return true;\n};\n\n\nUser.prototype.isAlive = function () {\n  return true;\n};\n\n/**\n * Check if the this user is the current logged in user or the specified user\n * @method isSelf\n * @param   {Object}  user The user to check against\n * @returns {Boolean} Whether or not this user is the same as the specified user\n */\n\n/**\n * @summary Check if the this user is the current logged in user or the specified user.\n * @memberOf User\n * @name isSelf\n * @version 1.2.3\n * @returns {String}\n */\n\nUser.prototype.isSelf = function (user) {\n  var userId = user && user._id || Meteor.userId();\n\n  if (this._id === userId) {\n    return true;\n  }\n};\n\n\n\n\n\n/**\n * @summary Gets the full name of the user.\n * @memberOf User\n * @name fullName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.fullName());\n * ```\n */\nUser.prototype.fullName = function () {\n    // if we're using Auth0\n  if (this.services && this.services.auth0) {\n    return this.services.auth0.name;\n\n    // if we're using an HL7 FHIR HumanName resource\n  } else if (this.profile && this.profile.name && this.profile.name.text){\n    // the following assumes a Person, RelatedPerson, or Practitioner resource\n    // which only has a single name specified\n    return this.profile.name.text;\n  } else if (this.profile && this.profile.name){\n    // the following assumes a Patient resource\n    // where multiple names and aliases may be specified\n    return this.profile.name[0].text;\n\n    // if we're using traditional Meteor naming convention\n  } else if (this.profile && this.profile.fullName){\n    return this.profile.fullName;\n  } else {\n    return \"---\";\n  }\n};\n\n\n/**\n * @summary Gets the given (first) name of the user.\n * @memberOf User\n * @name givenName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.givenName());\n * ```\n */\nUser.prototype.givenName = function () {\n  if(this.profile && this.profile.name){\n    // if we're using an HL7 FHIR HumanName resource\n    return this.profile.name[0].given;\n  } else if (this.profile && this.profile.fullName){\n    // if we're using traditional Meteor naming convention\n    var names = this.profile.fullName.split(\" \");\n    return names[0];\n  } else {\n    return \"\";\n  }\n};\n\n\n/**\n * @summary Gets the family (last) name of the user.\n * @memberOf User\n * @name familyName\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.familyName());\n * ```\n */\nUser.prototype.familyName = function () {\n  if (this.profile && this.profile.name) {\n    // if we're using an HL7 FHIR HumanName resource\n    return this.profile.name[0].family;\n  } else if (this.profile && this.profile.fullName){\n    // if we're using traditional Meteor naming convention\n    var names = this.profile.fullName.split(\" \");\n    return names[names.length - 1];\n  } else {\n    return \"---\";\n  }\n};\n\n/**\n * @summary Gets the default email that an account is associated.  Defined as the first verified email in the emails array.\n * @memberOf User\n * @name defaultEmail\n * @version 1.2.3\n * @returns {String}\n * @example\n * ```js\n * var selectedUser = Meteor.users.findOne({username: \"janedoe\"});\n * console.log(selectedUser.defaultEmail());\n * ```\n */\nUser.prototype.defaultEmail = function () {\n  return this.emails && this.emails[0].address;\n};\n\n/**\n * Get the default email address for the user\n * @method defaultEmail\n * @returns {String} The users default email address\n */\nUser.prototype.getEmails = function () {\n\n  var result = [];\n\n  if (this && this.emails) {\n    this.emails.forEach(function (email) {\n      result.push(email.address);\n    });\n  }\n\n  if (this.services && this.services.google && this.services.google.email) {\n    result.push(this.services.google.email);\n  }\n\n  if (result.length > 0){\n    return result;\n  } else {\n    return [];\n  }\n};\n\n\nUser.prototype.getPrimaryEmail = function () {\n  if (this.emails) {\n    return this.emails[0].address;\n  } else {\n    return \"---\";\n  }\n};\n\n\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    /**\n     * @summary Write all the User collaborations to the server console log.\n     * @locus Server\n     * @memberOf User\n     * @name /testGetCollaborations\n     * @version 1.2.3\n     * @returns {Array}\n     * @example\n     * ```js\n     * Meteor.call('testGetCollaborations');\n     * ```\n     */\n    testGetCollaborations:function (user){\n       console.log('testGetCollaborations');\n       var user = Meteor.users.findOne({_id: user._id});\n      //  console.log('isAlive', user.isAlive());\n       console.log('getAllCollaborations', user.getAllCollaborations(user));\n       //user.getAllCollaborations(user);\n    }\n  });\n\n  // refreshUserProfileCollaborations = function (){\n  //   User.getAllCollaborations().forEach(function(collaboration){\n  //\n  //   })\n  // }\n}\n"]}