{"version":3,"sources":["meteor://ðŸ’»app/packages/autoupdate/autoupdate_cordova.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qG","file":"/packages/autoupdate.js","sourcesContent":["var autoupdateVersionCordova = __meteor_runtime_config__.autoupdateVersionCordova || \"unknown\";\n\n// The collection of acceptable client versions.\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");\n\nAutoupdate = {};\n\nAutoupdate.newClientAvailable = function() {\n  return !! ClientVersions.findOne({\n    _id: 'version-cordova',\n    version: {$ne: autoupdateVersionCordova}\n  });\n};\n\nvar retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\nvar failures = 0;\n\nAutoupdate._retrySubscription = function() {\n  var appId = __meteor_runtime_config__.appId;\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", appId, {\n    onError: function(error) {\n      console.log(\"autoupdate subscription failed:\", error);\n      failures++;\n      retry.retryLater(failures, function() {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n    onReady: function() {\n      if (Package.reload) {\n        var checkNewVersionDocument = function(doc) {\n          var self = this;\n          if (doc.version !== autoupdateVersionCordova) {\n            newVersionAvailable();\n          }\n        };\n\n        var handle = ClientVersions.find({_id: 'version-cordova'}).observe({\n          added: checkNewVersionDocument,\n          changed: checkNewVersionDocument\n        });\n      }\n    }\n  });\n};\n\nMeteor.startup(function() {\n  WebAppLocalServer.onNewVersionReady(function() {\n    if (Package.reload) {\n      Package.reload.Reload._reload();\n    }\n  });\n\n  Autoupdate._retrySubscription();\n});\n\nvar newVersionAvailable = function() {\n  WebAppLocalServer.checkForUpdates();\n}\n"]}